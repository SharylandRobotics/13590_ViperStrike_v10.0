package org.firstinspires.ftc.teamcode.autonomous;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import org.firstinspires.ftc.teamcode.RobotHardware;
import org.firstinspires.ftc.teamcode.VisionSoftware;

@Autonomous(name = "PlayBack Auto ALPHA", group = "Experimental")
public class PlaybackAutoALPHA extends LinearOpMode {

    RobotHardware robot = new RobotHardware(this);
    VisionSoftware.aptDetector aptDetector = new VisionSoftware.aptDetector(this);
    ElapsedTime runtime = new ElapsedTime();

    // values go like this : drive, strafe, turn, heading, armPos(in deg), apt.range
    double[] dataTable = {-0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, 0, 0, 0, 0, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, 0, 0, 0, 0, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, 0, 0, 0, 0, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, 0, 0, 0, 0, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, 0, 0, 0, 0, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, 0, 0, 0, 0, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, 0, 0, 0, 0, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, 0, 0, 0, 0, 0.9332488775253296, 0.0, 0.0, 0.0, 0.4, 0.0, -1, 0, 0, 0, 0, 1.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -42, -51, -81, -87, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -177, -190, -275, -283, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -212, -222, -329, -335, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -224, -232, -362, -367, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -231, -240, -369, -373, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, 0.7329954504966736, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -232, -240, -369, -372, 0.3742082417011261, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -259, -268, -417, -425, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -324, -333, -532, -545, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -387, -393, -631, -648, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -399, -403, -670, -684, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -410, -412, -682, -695, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -411, -413, -682, -695, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -411, -411, -682, -694, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -411, -411, -682, -694, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -411, -411, -682, -694, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -411, -411, -682, -694, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -411, -411, -682, -694, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -411, -411, -682, -694, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -411, -411, -682, -694, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -411, -411, -682, -694, -0.0, -1.0633226156234743, 0.0, 0.0, 0.4, 0.0, -1, -410, -412, -684, -692, -0.0, -1.1, 0.0, 0.0, 0.4, 0.0, -1, -330, -510, -766, -585, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -186, -677, -906, -417, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -149, -728, -939, -372, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -135, -743, -951, -358, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -134, -742, -951, -357, -0.0, 0.43916388750076296, 0.0, 0.0, 0.4, 0.0, -1, -137, -738, -946, -357, -0.4409918189048767, 1.0816434741020204, 0.0, 0.0, 0.4, 0.0, -1, -187, -686, -905, -366, -0.5160868167877197, 1.1, 0.0, 0.0, 0.4, 0.0, -1, -315, -548, -765, -417, -0.18233121931552887, 0.46669874191284183, 0.0, 0.0, 0.4, 0.0, -1, -494, -374, -589, -552, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -680, -182, -396, -738, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -795, -70, -288, -835, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -829, -54, -256, -848, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -846, -41, -236, -857, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -848, -39, -233, -860, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -848, -39, -233, -860, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -848, -39, -233, -860, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -848, -39, -233, -860, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -848, -39, -233, -860, -0.6329012513160706, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -848, -39, -233, -860, -1.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -816, -8, -215, -835, -0.24073843657970428, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -665, 144, -120, -725, -0.0, 0.0, 0.0, 0.0, 0.4, 0.0, -1, -455, 363, 42, -551, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -384, 434, 75, -518, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -348, 460, 94, -501, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 466, 102, -497, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 464, 102, -498, -0.0, 0.0, 0.0, 0.10104843146631291, 0.4, 0.0, -1, -338, 0, 0, 0, };
    // how many indexes to skip to go to the next action
    int IS = 11; // just the # of things you print in Recorder ; short for Index Skip

    @Override
    public void runOpMode() {
        double heading;
        double rangeToAPT = -1;
        double ancRangeToAPT;
        // Initialize all the hardware using the hardware class.
        robot.init();
        aptDetector.visionInit();
        aptDetector.portalAPT.setProcessorEnabled(aptDetector.APTprocessor, true);

        robot.leftFrontDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.leftBackDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.rightFrontDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.rightBackDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        robot.leftFrontDrive.setTargetPosition(0);
        robot.leftBackDrive.setTargetPosition(0);
        robot.rightFrontDrive.setTargetPosition(0);
        robot.rightBackDrive.setTargetPosition(0);

        robot.leftFrontDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.leftBackDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.rightFrontDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.rightBackDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        robot.elbowDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.elbowDrive.setPower(1.0);
        // Send a telemetry message to signify the robot waiting; wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        for (int i = 0; i*IS < dataTable.length; i++) { // for every set (of 6) of indexes, do...

            while (robot.leftFrontDrive.isBusy() ||
                robot.leftBackDrive.isBusy() ||
                robot.rightFrontDrive.isBusy() ||
                robot.rightBackDrive.isBusy() ||
                robot.elbowDrive.isBusy() )
            {
                telemetry.addData((robot.leftFrontDrive.isBusy() ? "LF Busy, " : " ") // telemetry which motor is busy
                        + (robot.leftBackDrive.isBusy() ? "LB Busy, " : "") +
                        (robot.rightFrontDrive.isBusy() ? "RF Busy, " : "") +
                        (robot.rightBackDrive.isBusy() ? "RB Busy, " : "") +
                        (robot.elbowDrive.isBusy() ? "ELBOW Busy, " : ""), "");
            }
                telemetry.addData(String.valueOf(i), "-th action");
                // set power to motors before encoders
                robot.driveFieldCentric(dataTable[i * IS], dataTable[(i * IS) + 1], dataTable[(i * IS) + 2]);

                // set encoder targets
                robot.leftFrontDrive.setTargetPosition((int) dataTable[(i * IS) + 7]);
                robot.leftBackDrive.setTargetPosition((int) dataTable[(i * IS) + 8]);
                robot.rightFrontDrive.setTargetPosition(-(int) dataTable[(i * IS) + 9]);
                robot.rightBackDrive.setTargetPosition(-(int) dataTable[(i * IS) + 10]);

                robot.elbowDrive.setTargetPosition((int) (dataTable[(i * IS) + 3] * robot.COUNTS_PER_DEGREE));
                robot.clawPinch.setPosition(dataTable[(i * IS) + 4]);
                robot.clawAxial.setPosition(dataTable[(i * IS) + 5]);

                // April Tag Logic Section
                aptDetector.activeAPTscanner(-1);
                ancRangeToAPT = dataTable[(i * IS) + 6];
                if (aptDetector.targetFound) {
                    rangeToAPT = aptDetector.detectedTag.ftcPose.range;
                    if (Math.round(rangeToAPT / 0.1) * 0.1 == Math.round(ancRangeToAPT / 0.1) * 0.1) {
                        telemetry.addData("On Track", "...");
                    } else {
                        telemetry.addData("Off Course", "!!!\n Off by: " + Math.abs(ancRangeToAPT - rangeToAPT));
                    }
                } else {
                    telemetry.addData("No April Tag detected", "...\n Range should be: " + ancRangeToAPT);
                }
                telemetry.addData("Range to nearest APT:", rangeToAPT);
                telemetry.addData("Recorded Range to nearest APT:", ancRangeToAPT);
                telemetry.update();
                sleep(50);
        }

    }
}